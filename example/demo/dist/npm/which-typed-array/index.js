var forEach=require("../foreach/index.js"),availableTypedArrays=require("../available-typed-arrays/index.js"),callBound=require("../call-bind/callBound.js"),$toString=callBound("Object.prototype.toString"),hasSymbols=require("../has-symbols/index.js")(),hasToStringTag=hasSymbols&&"symbol"==typeof Symbol.toStringTag,typedArrays=availableTypedArrays(),$slice=callBound("String.prototype.slice"),toStrTags={},gOPD=require("../es-abstract/helpers/getOwnPropertyDescriptor.js"),getPrototypeOf=Object.getPrototypeOf;hasToStringTag&&gOPD&&getPrototypeOf&&forEach(typedArrays,function(r){if("function"==typeof global[r]){var t=new global[r];if(!(Symbol.toStringTag in t))throw new EvalError("this engine has support for Symbol.toStringTag, but "+r+" does not have the property! Please report this.");var e=getPrototypeOf(t),t=gOPD(e,Symbol.toStringTag);t||(e=getPrototypeOf(e),t=gOPD(e,Symbol.toStringTag)),toStrTags[r]=t.get}});var tryTypedArrays=function(o){var a=!1;return forEach(toStrTags,function(r,t){if(!a)try{var e=r.call(o);e===t&&(a=e)}catch(r){}}),a},isTypedArray=require("../is-typed-array/index.js");module.exports=function(r){return!!isTypedArray(r)&&(hasToStringTag?tryTypedArrays(r):$slice($toString(r),8,-1))};